package main

import (
    "fmt2"
    "reflect"
)


type AAA int

var i = 222

type Bbb struct {
    a string
    b int
}

func get() AAA {
    return AAA(i)
}


func get2() AAA {
    return AAA(6*3)
}

func testBytes() {
    a := []byte{111,112,113}
    v := reflect.ValueOf(a);
    b := v.Bytes()
    assert(a[0] == b[0])
    assert(a[1] == b[1])
    assert(a[2] == b[2])
}

func testValueElem() {
    t := 8
    i := &t
    v := reflect.ValueOf(i)
    re := v.Elem()
    fmt2.Println(v, re)
}

func testField() {
    b := Bbb{"xxx", 123}
    v := reflect.ValueOf(b)
    assert(v.Field(1).Int() == 123)
    fmt2.Println(v, v.Field(1).Int())
}

func testVals() {
    var i int16 = 555
    assert(reflect.ValueOf(i).Int() == 555)

    var j uint32 = 666
    assert(reflect.ValueOf(j).Uint() == 666)

    var k float32 = 3.5
    assert(reflect.ValueOf(k).Float() == 3.5)
}

func testIndex() {
    a := []int{23,34,56}
    v := reflect.ValueOf(a)  
    assert(v.Index(1).Int() == 34)

    b := "abcd"
    v = reflect.ValueOf(b)  
    assert(v.Index(1).Uint() == 'b')

    c := [3]int{23,34,56}
    v = reflect.ValueOf(c)  
    assert(v.Index(2).Int() == 56)
    
}

func testIsNil() {
    var m map[int]string
    var s []string
    assert(reflect.ValueOf(m).IsNil())
    assert(reflect.ValueOf(s).IsNil())
}


func testIsValid() {
    var m map[int]string
    v := reflect.ValueOf(m)
    var v1 reflect.Value
    assert(v.IsValid())
    assert(!v1.IsValid())
}

func testLen() {
    m := map[int]string{1:"a"}
    var s []int
    v := reflect.ValueOf(m)
    v1 := reflect.ValueOf(s)
    assert(v.Len() == 1)
    assert(v1.Len() == 0)
}


func main() {
    testBytes()
    testValueElem()
    testField()
    testVals()
    testIndex()
    testIsNil()
    testIsValid()
    testLen()

    
    i := reflect.TypeOf(get)
    j := reflect.TypeOf(get2)
    assert(i == j)
    fmt2.Println(get2(), get(), i, j, i == j )
    
}
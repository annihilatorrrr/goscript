package main


//import "math"
    

const k = i + 1

const i = 7

var b = a + k
var a = 8



type Kind uint

const (
	Invalid Kind = iota
	Bool
	Int
	Int8
	Int16
	Int32
	Int64
	Uint
	Uint8
	Uint16
	Uint32
	Uint64
	Uintptr
	Float32
	Float64
	Complex64
	Complex128
	Array
	Chan
	Func
	Interface
	Map
	Ptr
	Slice
	String
	Struct
	UnsafePointer
)

var kindNames = []string{
	Invalid:       "invalid",
	Bool:          "bool",
	Int:           "int",
	Int8:          "int8",
	Int16:         "int16",
	Int32:         "int32",
	Int64:         "int64",
	Uint:          "uint",
	Uint8:         "uint8",
	Uint16:        "uint16",
	Uint32:        "uint32",
	Uint64:        "uint64",
	Uintptr:       "uintptr",
	Float32:       "float32",
	Float64:       "float64",
	Complex64:     "complex64",
	Complex128:    "complex128",
	Array:         "array",
	Chan:          "chan",
	Func:          "func",
	Interface:     "interface",
	Map:           "map",
	Ptr:           "ptr",
	Slice:         "slice",
	String:        "string",
	Struct:        "struct",
	UnsafePointer: "unsafe.Pointer",
}

func main() {
    /*
    var pi2 = math.Pi2
    var pi = math.Pi
    _ = pi
    _ = pi2
    assert(k == 8)
    assert(b == 16)
    assert(math.Plus4(b + math.V2 + math.C2) == 24)
    math.V2 += 2
    assert(math.Plus4(b + math.V2 + math.C2) == 28)
    */

    _, j := fa()
    assert(j == 7)

    assert(kindNames[2] == "int")
}

func fa () (int, int) {
	assert(8 == fb())
	return 6,7
}

func fb() int {
	return 8
}
